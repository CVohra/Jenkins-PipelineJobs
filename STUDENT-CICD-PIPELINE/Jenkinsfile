node{
    stage('Cloning Repository') {
        git 'https://github.com/cit-agnitio/student-springboot.git'
    }

    stage('Compile Code') {
        try {
            withMaven(jdk: 'JDK8', maven: 'MAVEN354') {
                sh 'mvn compile'
            }
        }
        catch (exc) {
            slackSend color: '#FF0000', message: "Jenkins Job FAILURE\nJenkins Job NAME: ${env.JOB_NAME}\nJenkins Job URL: ${env.BUILD_URL}"
            sh 'false'
        }
    }

    stage('Code Analysis') {
        withMaven(jdk: 'JDK8', maven: 'MAVEN354') {
            sh 'mvn sonar:sonar -Dsonar.host.url=http://10.142.0.10:9000 -Dsonar.login=8210bc003804617f42e4bd097912c21ad0769a7d'
        }
    }

    stage('Packaging') {
        withMaven(jdk: 'JDK8', maven: 'MAVEN354') {
            sh 'mvn package'
        }
    }

    stage('Testing Approval') {
        input message: 'Do you want to proceed with Testing', ok: 'YES'
    }

    stage('Create Google Instance') {
        sh '''NODESTAT=$(gcloud compute instances list | grep testnode &>/dev/null || echo NO)
if [ "$NODESTAT" = NO ]; then 
    echo "Node does not exist"
else
	gcloud compute instances delete testnode --zone=us-east1-b --quiet
fi

gcloud compute instances create testnode --image=mycentos7  --zone=us-east1-b
echo testnode >/tmp/inventory
sleep 30'''
    }

    stage('Run Ansible Playbook') {
        git 'https://github.com/cit-agnitio/ansible-playbooks-testing.git'
        sh 'ansible-playbook -i /tmp/inventory single-node-stack.yml'
        sh 'ansible-playbook -i /tmp/inventory studentapp-deploy.yml'
    }

    stage('Selenium Testing'){
        git 'https://github.com/cit-agnitio/selenium-sauce.git'
        sh'''IPADDRESS=$(gcloud compute instances list | grep testnode | awk '{print $(NF-1)}')
sed -i -e "s/IPADDRESS/$IPADDRESS/" src/test/java/framework/CrudStudent.java
sleep 30
'''
        withMaven(jdk: 'JDK8', maven: 'MAVEN354') {
            sh 'mvn install "-Dremote=true" "-DseleniumGridURL=http://raghudevops29:7c119589-03d6-49a0-9633-844fa88835f3@ondemand.saucelabs.com:80/wd/hub" "-Dplatform=Windows" "-Dbrowser=Chrome" "-Doverwrite.binaries=true"'
        }

    }

    stage('API Testing') {
        git 'https://github.com/cit-agnitio/ansible-playbooks-testing.git'
        sh '''IPADDRESS=$(gcloud compute instances list | grep testnode | awk '{print $(NF-1)}')
python api-test.py $IPADDRESS
'''
    }

    stage('Nexus Snapshot Upload') {
        withMaven(jdk: 'JDK8', maven: 'MAVEN354') {
            sh 'mvn deploy'
        }
    }


    stage('Nexus Upload') {
        def releaseVersion = input message: 'Enter Release No', parameters: [string(defaultValue: '', description: 'Enter Release Number', name: 'RELEASE', trim: false)]
        env.releaseVersion = releaseVersion
        withMaven(jdk: 'JDK8', maven: 'MAVEN354') {
            sh 'mvn versions:set -DnewVersion=${releaseVersion}-RELEASE clean package deploy'
        }
        
    }
}
